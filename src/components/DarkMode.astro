---
import IconMoon from './icons/IconMoon.astro'
import IconSun from './icons/IconSun.astro'

// TODO: Remove SSR-only code as it's everything SSG now

const theme = Astro.cookies.get('theme')?.value || 'dark'
const isDark = theme === 'dark'
---

<button
   id="theme_switch"
   type="button"
   role="switch"
   aria-checked={`${isDark}`}
   aria-label={isDark ? 'Disable dark mode' : 'Enable dark mode'}
>
   <IconSun id="theme_sun_icon" style={{ display: isDark ? 'block' : 'none' }} />
   <IconMoon id="theme_moon_icon" style={{ display: isDark ? 'none' : 'block' }} />
</button>

<script>
   const audio = new Audio('/toggle.mp3')

   const getBtn = (doc: Document = document) => doc.getElementById('theme_switch')
   const getSun = (doc: Document = document) => doc.getElementById('theme_sun_icon')
   const getMoon = (doc: Document = document) => doc.getElementById('theme_moon_icon')

   function setAria(el: HTMLElement, theme: 'light' | 'dark') {
      const isDark = theme === 'dark'

      el.ariaChecked = `${isDark}`
      el.ariaLabel = isDark ? 'Disable dark mode' : 'Enable dark mode'
   }

   function hideEl(el: HTMLElement) {
      el.ontransitionend = null
      Object.assign(el.style, { display: 'none', transform: '', opacity: '' })
   }

   function init() {
      const button = getBtn()
      const sunIcon = getSun()
      const moonIcon = getMoon()

      function onClick() {
         audio.play()

         const { theme: currTheme } = document.documentElement.dataset

         if (currTheme === 'dark') {
            Object.assign(sunIcon.style, { opacity: 0, transform: 'translateX(30%)' })

            sunIcon.ontransitionend = function () {
               hideEl(this as HTMLElement)
            }

            requestAnimationFrame(() => {
               Object.assign(moonIcon.style, {
                  display: 'block',
                  opacity: 0,
                  transform: 'translateX(30%)',
               })
               requestAnimationFrame(() => {
                  Object.assign(moonIcon.style, { opacity: '', transform: 'translateX(0)' })
               })
            })
         } else {
            Object.assign(moonIcon.style, { opacity: 0, transform: 'translateX(-30%)' })

            moonIcon.ontransitionend = function () {
               hideEl(this as HTMLElement)
            }

            requestAnimationFrame(() => {
               Object.assign(sunIcon.style, {
                  display: 'block',
                  opacity: 0,
                  transform: 'translateX(-30%)',
               })
               requestAnimationFrame(() => {
                  Object.assign(sunIcon.style, { opacity: '', transform: 'translateX(0)' })
               })
            })
         }

         const newTheme = currTheme === 'dark' ? 'light' : 'dark'

         document.cookie = `theme=${newTheme};max-age=${60 * 60 * 24 * 365};path=/`
         document.documentElement.dataset.theme = newTheme

         setAria(this, newTheme)
      }

      button.addEventListener('click', onClick)

      return () => {
         button.removeEventListener('click', onClick)
      }
   }

   let destroy = init()

   // This is needed as Astro may have already prefetched pages before switching theme
   document.addEventListener('astro:before-swap', (e) => {
      const button = getBtn(e.newDocument)
      const sunIcon = getSun(e.newDocument)
      const moonIcon = getMoon(e.newDocument)

      const isDark = document.documentElement.dataset.theme === 'dark'
      const currTheme = isDark ? 'dark' : 'light'

      e.newDocument.documentElement.dataset.theme = currTheme

      sunIcon.style.display = isDark ? 'block' : 'none'
      moonIcon.style.display = isDark ? 'none' : 'block'

      setAria(button, currTheme)
   })

   document.addEventListener('astro:after-swap', () => {
      destroy()
      destroy = init()
   })
</script>

<style>
   button {
      --padding: 0.75rem;
      --size: calc(var(--header-icon-size) + (2 * var(--padding)));

      border: none;
      display: flex;
      padding: var(--padding);
      width: var(--size);
      height: var(--size);

      & :global(svg) {
         width: var(--header-icon-size);
         height: var(--header-icon-size);

         position: absolute;
         transition:
            transform 100ms ease-out,
            opacity 100ms ease-out;
      }

      &:hover {
         & :global(svg) {
            opacity: 0.5;
         }
      }
   }
</style>
