---
import Logo from './Logo.astro'
import MobileMenu from './MobileMenu.astro'
import DarkMode from './DarkMode.astro'

import IconEmail from './icons/IconEmail.astro'
import IconTelegram from './icons/IconTelegram.astro'
import IconGitHub from './icons/IconGitHub.astro'
import IconDiscord from './icons/IconDiscord.astro'

import { navLinks } from '@/lib/static'
import { getLinkProps } from '@/lib/utils'

function getExtLinkAttrs(label: string) {
   return {
      rel: 'noreferrer',
      target: '_blank',
      'aria-label': label,
      title: label,
   }
}
---

<header id="header">
   <a href="/" aria-label="Home">
      <Logo
         width="40"
         height="40"
         style={{
            display: 'flex',
         }}
      />
   </a>
   <nav class="Nav">
      {
         navLinks.map((l) => (
            <a {...getLinkProps(Astro.url, l.href)}>
               <l.Icon />
               {l.caption}
            </a>
         ))
      }
   </nav>

   <nav class="Nav_Right">
      <DarkMode />

      <a href="mailto:hello@smastrom.io" {...getExtLinkAttrs('Email')}>
         <IconEmail />
      </a>

      <a href="https://t.me/smastrom" {...getExtLinkAttrs('Telegram')}>
         <IconTelegram />
      </a>

      <a href="https://github.com/smastrom" {...getExtLinkAttrs('GitHub')}>
         <IconGitHub />
      </a>

      <a href="https://discordapp.com/users/1174395637660401695" {...getExtLinkAttrs('Discord')}>
         <IconDiscord />
      </a>
   </nav>
</header>

<MobileMenu />

<script>
   const getHeader = () => document.getElementById('header')

   function initScroll() {
      let isHoveringHeader = false
      let prevY = 0
      let currentY = 0

      const minStep = 10

      let header = getHeader()

      function onScroll() {
         if (isHoveringHeader) return

         prevY = currentY
         currentY = window.scrollY

         const isHeaderInView = currentY <= header.clientHeight * 1.5

         if (isHeaderInView) {
            return (header.style.transform = 'translateY(0)')
         }

         if (Math.abs(currentY - prevY) < minStep) return

         const isScrollingUp = currentY < prevY

         header.style.transform = isScrollingUp
            ? 'translateY(0)'
            : `translateY(-${header.clientHeight + 10}px)`
      }

      const onHover = () => (isHoveringHeader = true)
      const onLeave = () => (isHoveringHeader = false)

      window.addEventListener('scroll', onScroll, { passive: true })
      header.addEventListener('mouseover', onHover)
      header.addEventListener('mouseleave', onLeave)

      return () => {
         window.removeEventListener('scroll', onScroll)
         header.removeEventListener('mouseover', onHover)
         header.removeEventListener('mouseleave', onLeave)
      }
   }

   let destroy = initScroll()

   document.addEventListener('astro:after-swap', () => {
      destroy()

      let header = getHeader()
      if (!header) return

      destroy = initScroll()
   })
</script>

<style>
   header {
      padding: 0 var(--page-margin);
      display: flex;
      height: var(--header-height);
      backdrop-filter: blur(var(--s-05));
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      border-bottom: var(--b-1) solid var(--divider);
      justify-content: space-between;
      align-items: center;
      z-index: var(--z-2);
      transition:
         transform 300ms cubic-bezier(0.33, 1, 0.68, 1),
         background-color var(--easing),
         color var(--easing);

      @supports not (backdrop-filter: blur(var(--s-05))) {
         background-color: var(--bg);
      }

      @media (--desktop-from) {
         padding: 0 var(--page-margin);
      }
   }

   .Nav {
      display: flex;
      gap: var(--s-7);
      font-weight: 500;

      @media (--laptop-to) {
         gap: var(--s-4);
      }

      @media (--menu-shift-to) {
         display: none;
      }

      @media (--article-container-from) {
         position: absolute;
         left: 50%;
         transform: translateX(-50%);
      }

      & a {
         display: flex;
         align-items: center;
         gap: var(--s-05);
         white-space: nowrap;
         padding: var(--s-02) var(--s-07);
         font-size: var(--f-1);
         line-height: 1;
         border: var(--b-1) solid rgba(0, 0, 0, 0);
         transition: all var(--easing);
         user-select: none;

         & :global(svg) {
            width: 1.25em;
            height: 1.25em;
            opacity: var(--o-3);
         }

         &:hover,
         &[aria-current='page'] {
            background-color: var(--bg);
            border: var(--b-1) solid var(--divider);
            border-radius: var(--r-max);
         }

         &[aria-current='page'] {
            pointer-events: none;

            & :global(svg) {
               color: var(--accent);
            }
         }
      }
   }

   html[data-theme='light'] {
      & .Nav a {
         & :global(svg) {
            stroke-width: 1.75;
            color: currentColor;
            opacity: var(--o-2);
         }

         &[aria-current='page'] {
            pointer-events: none;

            & :global(svg) {
               color: currentColor;
               opacity: 1;
            }
         }
      }
   }

   .Nav_Right {
      --gap: var(--s-2);

      display: flex;
      gap: var(--gap);
      align-items: center;

      @media (--mobile-to) {
         --gap: var(--s-1);
      }

      & a {
         --padding: var(--s-05);

         padding: var(--padding);
         margin-right: calc(-1 * var(--padding));
         display: flex;

         & :global(svg) {
            width: var(--header-icon-size);
            height: var(--header-icon-size);
            transition: opacity 100ms linear;
         }

         &:hover {
            & :global(svg) {
               opacity: var(--o-2);
            }
         }
      }
   }
</style>
