---
import IconMoon from './icons/IconMoon.astro'
import IconSun from './icons/IconSun.astro'
---

<button id="theme_switch" type="button" role="switch">
   <IconSun id="theme_sun_icon" />
   <IconMoon id="theme_moon_icon" />
</button>

<span id="theme_divider" class="Divider"></span>

<style>
   .Divider {
      width: var(--b-1);
      align-self: stretch;
      background-color: var(--divider);
   }

   @media (prefers-color-scheme: dark) {
      html[data-theme='auto'] #theme_moon_icon {
         display: none;
      }
   }

   @media (prefers-color-scheme: light) {
      html[data-theme='auto'] #theme_sun_icon {
         display: none;
      }
   }
</style>

<noscript>
   <style>
      #theme_switch,
      #theme_divider {
         display: none;
      }
   </style>
</noscript>

<script>
   type Theme = 'light' | 'dark'

   let audio: HTMLAudioElement = null

   const getBtn = (doc: Document = document) => doc.getElementById('theme_switch')
   const getSun = (doc: Document = document) => doc.getElementById('theme_sun_icon')
   const getMoon = (doc: Document = document) => doc.getElementById('theme_moon_icon')

   const getTheme = () => document.documentElement.dataset.theme as Theme

   function setInitialTheme() {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
         ? 'dark'
         : 'light'

      document.documentElement.dataset.theme = systemTheme

      setAria(getBtn(), systemTheme as Theme)

      if (systemTheme === 'dark') {
         getMoon().style.display = 'none'
      } else {
         getSun().style.display = 'none'
      }
   }

   function setAria(el: HTMLElement, theme: Theme) {
      const isDark = theme === 'dark'

      el.ariaChecked = `${isDark}`
      el.ariaLabel = isDark ? 'Disable dark mode' : 'Enable dark mode'
   }

   function hideEl(el: HTMLElement) {
      el.ontransitionend = null
      Object.assign(el.style, { display: 'none', transform: '', opacity: '' })
   }

   function cleanupAudio() {
      if (!audio) return

      audio.removeEventListener('ended', cleanupAudio)
      audio.pause()
      audio.src = ''
      audio.load()
      audio = null
   }

   function initSwitch() {
      const button = getBtn()
      const sunIcon = getSun()
      const moonIcon = getMoon()

      function onClick() {
         if (audio) cleanupAudio()

         audio = new Audio('/toggle.mp3')
         audio.addEventListener('ended', cleanupAudio)
         audio.play()

         const currTheme = getTheme()

         if (currTheme === 'dark') {
            Object.assign(sunIcon.style, { opacity: 0, transform: 'translateX(30%)' })

            sunIcon.ontransitionend = function () {
               hideEl(this as HTMLElement)
            }

            requestAnimationFrame(() => {
               Object.assign(moonIcon.style, {
                  display: 'block',
                  opacity: 0,
                  transform: 'translateX(30%)',
               })
               requestAnimationFrame(() => {
                  Object.assign(moonIcon.style, { opacity: '', transform: 'translateX(0)' })
               })
            })
         } else {
            Object.assign(moonIcon.style, { opacity: 0, transform: 'translateX(-30%)' })

            moonIcon.ontransitionend = function () {
               hideEl(this as HTMLElement)
            }

            requestAnimationFrame(() => {
               Object.assign(sunIcon.style, {
                  display: 'block',
                  opacity: 0,
                  transform: 'translateX(-30%)',
               })
               requestAnimationFrame(() => {
                  Object.assign(sunIcon.style, { opacity: '', transform: 'translateX(0)' })
               })
            })
         }

         const newTheme = currTheme === 'dark' ? 'light' : 'dark'

         document.documentElement.dataset.theme = newTheme

         setAria(this, newTheme)
      }

      button.addEventListener('click', onClick)

      return () => {
         button.removeEventListener('click', onClick)
         cleanupAudio()
      }
   }

   setInitialTheme()

   let destroySwitch = initSwitch()

   document.addEventListener('astro:before-swap', (e) => {
      const button = getBtn(e.newDocument)
      const sunIcon = getSun(e.newDocument)
      const moonIcon = getMoon(e.newDocument)

      const currTheme = getTheme()
      const isDark = currTheme === 'dark'

      e.newDocument.documentElement.dataset.theme = currTheme

      sunIcon.style.display = isDark ? 'block' : 'none'
      moonIcon.style.display = isDark ? 'none' : 'block'

      setAria(button, currTheme)
   })

   document.addEventListener('astro:after-swap', () => {
      destroySwitch()
      destroySwitch = initSwitch()
   })
</script>

<style>
   button {
      --padding: var(--s-07);
      --size: calc(var(--header-icon-size) + (2 * var(--padding)));

      border: none;
      display: flex;
      padding: var(--padding);
      width: var(--size);
      height: var(--size);

      & :global(svg) {
         width: var(--header-icon-size);
         height: var(--header-icon-size);

         position: absolute;
         transition:
            transform 100ms ease-out,
            opacity 100ms ease-out;
      }

      &:hover {
         & :global(svg) {
            opacity: var(--o-2);
         }
      }
   }
</style>
